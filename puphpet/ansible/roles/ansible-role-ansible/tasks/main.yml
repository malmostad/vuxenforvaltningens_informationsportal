---

- name: Install required packages
  apt: pkg={{ item }} state=latest install_recommends=no
  with_items: [ 'git', 'python-paramiko', 'python-yaml', 'python-jinja2', 'python-httplib2',
                'cdbs', 'debhelper', 'dpkg-dev', 'python-support', 'fakeroot', 'sshpass',
                'python-nose', 'python-passlib', 'python-setuptools', 'asciidoc', 'xmlto',
                'devscripts', 'build-essential' ]

- name: Get user home directory
  shell: echo $HOME
  register: role_ansible_user_home
  changed_when: False
  sudo_user: '{{ role_ansible_build_user }}'

- name: Clone Ansible repository
  git: repo={{ role_ansible_git_repository }} dest={{ role_ansible_user_home.stdout }}/{{ role_ansible_build_path }}
       version={{ role_ansible_version }} update=yes
  register: role_ansible_git
  sudo_user: '{{ role_ansible_build_user }}'

- name: Get current Ansible version
  slurp: src={{ role_ansible_user_home.stdout }}/{{ role_ansible_build_path }}/VERSION
  register: role_ansible_build_version

- name: Set Ansible package version
  set_fact:
    role_ansible_package_version: '{{ role_ansible_build_version.content | b64decode | trim }}'

- name: Build Ansible .deb package
  command: make deb chdir={{ role_ansible_user_home.stdout }}/{{ role_ansible_build_path }}
  register: role_ansible_build
  when: role_ansible_git is defined and role_ansible_git.changed == True
  sudo_user: '{{ role_ansible_build_user }}'

- name: Check if new style .deb package is present
  shell: find {{ role_ansible_user_home.stdout }}/{{ role_ansible_build_path }}/deb-build/unstable/ -name 'ansible_{{ role_ansible_package_version }}-*_all.deb' 2>/dev/null || true
  register: role_ansible_register_new_deb
  when: (role_ansible_build is defined and role_ansible_build.changed)

- name: Check if old style .deb package is present
  shell: find {{ role_ansible_user_home.stdout }}/{{ role_ansible_build_path }}/../ -name 'ansible_{{ role_ansible_package_version }}_all.deb' 2>/dev/null || true
  register: role_ansible_register_old_deb
  when: (role_ansible_build is defined and role_ansible_build.changed)

- name: Install Ansible .deb package (new version)
  shell: dpkg -i {{ role_ansible_user_home.stdout }}/{{ role_ansible_build_path }}/deb-build/unstable/ansible_{{ role_ansible_package_version }}-*_all.deb
  when: role_ansible_register_new_deb is defined and role_ansible_register_new_deb.stdout != ""

- name: Install Ansible .deb package (old version)
  shell: dpkg -i {{ role_ansible_user_home.stdout }}/{{ role_ansible_build_path }}/../ansible_{{ role_ansible_package_version }}_all.deb
  when: role_ansible_register_old_deb is defined and role_ansible_register_old_deb.stdout != ""

- name: Check if Redis is installed
  stat: path=/usr/bin/redis-server
  register: role_ansible_register_redis

- name: Enable Redis fact caching in Ansible
  set_fact:
    role_ansible_fact_caching: 'redis'
  when: (role_ansible_register_redis is defined and role_ansible_register_redis.stat.exists)

- name: Install packages required for Redis support
  apt:
    name: 'python-redis'
    state: 'latest'
    install_recommends: False
  when: (role_ansible_register_redis is defined and role_ansible_register_redis.stat.exists)

- name: Configure /etc/ansible/ansible.cfg
  template:
    src: 'etc/ansible/ansible.cfg.j2'
    dest: '/etc/ansible/ansible.cfg'
    owner: 'root'
    group: 'root'
    mode: '0644'

