<?php

/**
 * @file
 * Contains mal_user_courses.module
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function mal_user_courses_ctools_plugin_directory($owner, $plugin_type) {
  return 'plugins/' . $plugin_type;
}

/**
 * Implements hook_views_query_alter().
 */
function mal_user_courses_views_query_alter(&$view, &$query) {
  if ($view->name == 'my_courses' || $view->name == 'my_course_application_list') {
    switch ($view->current_display) {
      case 'not_searchable_pane':
      case 'not_searchable_package_pane':
        $values = array(
          variable_get('mal_generate_content_searchable_type_2', 76),
          variable_get('mal_generate_content_searchable_type_3', 77),
          variable_get('mal_generate_content_searchable_type_4', 78),
        );
        $values = array_combine($values, $values);
        _mal_user_courses_update_query_values($query, $values);
        break;

      default:
        $values = array(
          variable_get('mal_generate_content_searchable_type_0', 74),
          variable_get('mal_generate_content_searchable_type_1', 75),
        );
        $values = array_combine($values, $values);
        _mal_user_courses_update_query_values($query, $values);
        break;
    }
  }
}

/**
 * Update course_searchable_type query component with values from variables.
 *
 * @param object $query
 *   View query instance.
 * @param array $values
 *   New query parameters.
 */
function _mal_user_courses_update_query_values(&$query, array $values) {
  $set = FALSE;
  foreach ($query->where as $w_key => $where) {
    foreach ($where['conditions'] as $c_key => $cond) {
      if ($cond['field'] == 'field_data_field_course_searchable_type.field_course_searchable_type_tid') {
        $query->where[$w_key]['conditions'][$c_key]['value'] = $values;
        $set = TRUE;
        break;
      }
    }
    if ($set) {
      break;
    }
  }
}

/**
 * Implements hook_preprocess_views_view_table().
 */
function mal_user_courses_preprocess_views_view_table(array &$vars) {
  if ($vars['view']->name == 'my_courses' && $vars['view']->current_display == 'course_pane') {
    $processed_results = array();
    $processed_results_classes = array();
    $delta = 0;

    $flex_forms = variable_get('course_flex_form_terms', array());

    foreach ($vars['result'] as $key => $result) {
      if (!empty($flex_forms) &&
        !empty($result->field_field_course_form) &&
        in_array($result->field_field_course_form[0]['raw']['tid'], $flex_forms)) {
        $processed_result = $vars['rows'][$key];
        // Mock sorting data.
        $processed_result['#raw_start_date'] = empty($result->field_field_course_date[0]['raw']['value']) ?
          -1 : $result->field_field_course_date[0]['raw']['value'];
        $processed_result['#raw_end_date'] = empty($result->field_field_course_date[0]['raw']['value2']) ?
          99999999999999 : $result->field_field_course_date[0]['raw']['value2'];
        $processed_result['#raw_day'] = 0;
        $processed_result['#raw_start_time'] = -1;
        $processed_result['#raw_end_time'] = -1;

        $processed_results[] = $processed_result;
      }
      else {
        foreach (array('mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun') as $day) {
          if ($result->{'field_data_field_course_periods_field_course_periods_' . $day} == 1) {
            $processed_result = $vars['rows'][$key];

            // Populate data for sorting and intersections.
            $processed_result['#raw_start_date'] = empty($result->field_field_course_date[0]['raw']['value']) ?
              -1 : $result->field_field_course_date[0]['raw']['value'];
            $processed_result['#raw_end_date'] = empty($result->field_field_course_date[0]['raw']['value2']) ?
              99999999999999 : $result->field_field_course_date[0]['raw']['value2'];
            $processed_result['#raw_day'] = $day;
            $processed_result['#raw_start_time'] = $result->field_data_field_course_periods_field_course_periods_value;
            $processed_result['#raw_end_time'] = $result->field_data_field_course_periods_field_course_periods_value2;

            $rendered = $result->field_field_course_periods[0]['rendered'];
            $rendered = mal_user_courses_clean_days($rendered, $day);
            $processed_result['field_course_periods'] = theme('timefield_formatter', $rendered);

            $rendered = $result->field_field_course_periods_1[0]['rendered'];
            $rendered = mal_user_courses_clean_days($rendered, $day);
            $processed_result['field_course_periods_1'] = theme('timefield_formatter', $rendered);
            $processed_results[] = $processed_result;
            $processed_results_classes[] = array();
            $delta++;
          }
        }
      }
    }

    // @todo Implement sorting.
    usort($processed_results, 'mal_user_courses_date_sort');

    // Find intersections and remove sorter fields.
    foreach ($processed_results as &$res) {
      if (!empty($res['#overlap'])) {
        $res['title'] .= '<i class="overlap">&nbsp;</i>';
        unset($res['#overlap']);
      }
      unset($res['#raw_start_date']);
      unset($res['#raw_end_date']);
      unset($res['#raw_day']);
      unset($res['#raw_start_time']);
      unset($res['#raw_end_time']);
    }

    $vars['rows'] = $processed_results;
    $vars['row_classes'] = $processed_results_classes;
  }
}

/**
 * Sorter callback.
 *
 * @param array $a
 *   First array of sorted values.
 * @param array $b
 *   Second array of sorted values.
 *
 * @return int
 *   -1|0|+1 depending on sorted values.
 */
function mal_user_courses_date_sort(&$a, &$b) {
  $ds1 = $a['#raw_start_date'];
  $de1 = $a['#raw_end_date'];
  $ds2 = $b['#raw_start_date'];
  $de2 = $b['#raw_end_date'];
  if ($ds1 == $ds2
    || ($ds1 < $ds2 && $de1 > $ds2)
    || ($ds2 < $ds1 && $de2 > $ds1)
  ) {
    $days = array(
      'mon' => 0,
      'tue' => 1,
      'wed' => 2,
      'thu' => 3,
      'fri' => 4,
      'sat' => 5,
      'sun' => 6,
    );
    $day1 = $a['#raw_day'];
    $day2 = $b['#raw_day'];
    if ($day1 == $day2) {
      $ts1 = $a['#raw_start_time'];
      $te1 = $a['#raw_end_time'];
      $ts2 = $b['#raw_start_time'];
      $te2 = $b['#raw_end_time'];
      if ($ts1 == $ts2
        || ($ts1 < $ts2 && $te1 > $ts2)
        || ($ts2 < $ts1 && $te2 > $ts1)
      ) {
        $a['#overlap'] = $b['#overlap'] = TRUE;
        return 0;
      }
      return $ts1 > $ts2 ? 1 : -1;
    }
    return $days[$day1] > $days[$day2] ? 1 : -1;
  }
  return $ds1 > $ds2 ? 1 : -1;
}

/**
 * Disable all days except given from timefield instance.
 *
 * @param array $rendered
 *   Rendered array from views preprocessor.
 * @param string $day_to_keep
 *   Short string name of week day.
 *
 * @return array
 *   Modified rendered array for views preprocess.
 */
function mal_user_courses_clean_days(array $rendered, $day_to_keep) {
  $time = array(
    'mon' => 0,
    'tue' => 0,
    'wed' => 0,
    'thu' => 0,
    'fri' => 0,
    'sat' => 0,
    'sun' => 0,
  );

  $time[$day_to_keep] = 1;

  $time += $rendered['#time'];
  $rendered['#time'] = $time;

  return $rendered;
}
// @codingStandardsIgnoreStart
///**
// * Implements hook_preprocess_HOOK().
// */
//function mal_user_courses_preprocess_views_view_field(&$variables) {
//  if (in_array($variables['view']->name, array(
//      'my_courses',
//      'my_course_application_list',
//    ))
//    && in_array($variables['field']->real_field, array(
//      'field_course_date_value',
//      'field_course_application_period_value',
//    ))
//    && !empty($variables['row']->field_field_course_continuos[0]['raw']['value'])
//  ) {
//    $variables['output'] .= ' - <span class="date-continuous">' . t('continuous') . '</span>';
//  }
//}
// @codingStandardsIgnoreEnd

/**
 * Implements hook_preprocess_HOOK().
 */
function mal_user_courses_preprocess_views_view_list(&$variables) {
  if ($variables['view']->name == 'sidebar_courses'
    && $variables['view']->current_display == 'course_menu_pane'
  ) {
    $exclamation_tids = array(
      variable_get('mal_generate_content_searchable_type_1', FALSE),
      variable_get('mal_generate_content_searchable_type_2', FALSE),
      variable_get('mal_generate_content_searchable_type_3', FALSE),
    );
    $results = $variables['view']->result;
    $classes = &$variables['classes_array'];
    $class = 'has-not-started';
    foreach ($results as $id => $row) {
      if (!empty($row->field_field_course_searchable_type)
        && in_array($row->field_field_course_searchable_type[0]['raw']['tid'], $exclamation_tids)
      ) {
        $classes[$id] = isset($classes[$id]) ? $classes[$id] . ' ' . $class : $class;
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function mal_user_courses_field_formatter_info() {
  return array(
    'muc_timefield_custom' => array(
      'label' => t('Custom List'),
      'field types' => array('timefield'),
      'settings' => array(
        'display_format' => array(
          'day_of_week' => 'D',
          'day_separator' => ' ',
          'separator' => ':',
          'period_separator' => '',
          'period' => 'a',
          'hour' => 'g',
          'minute' => 'i',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function mal_user_courses_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  if ($display['type'] == 'muc_timefield_custom') {
    $element += _timefield_display_format_form('display_format', "Individual Time Display Settings", $settings);
    if (!empty($element['display_format']['hour']['#options'])) {
      $element['display_format']['hour']['#options'] = array('none' => t('None')) + $element['display_format']['hour']['#options'];
    }
    $element['display_format']['day_of_week'] = array(
      '#type' => 'select',
      '#title' => t('Day of week Format'),
      '#options' => array(
        'none' => t('None'),
        'D' => t('Three letters'),
        'l' => t('Full'),
      ),
      '#default_value' => $settings['display_format']['day_of_week'],
      '#weight' => -50,
    );
    $element['display_format']['day_separator'] = array(
      '#type' => 'textfield',
      '#title' => t('Day separator'),
      '#default_value' => $settings['display_format']['day_separator'],
      '#weight' => -45,
    );
  }

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function mal_user_courses_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  if (($display['type']) == 'muc_timefield_custom') {
    $current_time = timefield_time_to_integer(date('g:ia', strtotime("now")));

    return t('Current Format') . ': ' . timefield_integer_to_time($settings['display_format'], $current_time);
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function mal_user_courses_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $settings = $display['settings'];
  $settings += $field['settings'];
  $element = array();

  switch ($display['type']) {
    case 'muc_timefield_custom':
      $days = array(
        'sun' => array(),
        'mon' => array(),
        'tue' => array(),
        'wed' => array(),
        'thu' => array(),
        'fri' => array(),
        'sat' => array(),
      );

      foreach ($items as $delta => $item) {
        $day = array_search(1, $item);
        $days[$day][$item['value']] = array(
          '#theme' => array('timefield_formatter'),
          '#time' => $item,
          '#settings' => $settings,
          '#format' => 'default',
        );
      }

      foreach ($days as $key => $day) {
        ksort($days[$key]);
        $element = array_merge($element, $days[$key]);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_attach_view_alter().
 *
 * Emulate field_default_veiw for app_date and date fields for case when
 * continuous checkbox is checked.
 */
function mal_user_courses_field_attach_view_alter(&$output, $context) {
  if ($context['entity_type'] == 'node' && $context['entity']->type == 'course') {
    $entity = $context['entity'];
    $continuous = field_get_items('node', $entity, 'field_course_continuos');
    if (!empty($continuous[0]['value'])) {
      $fields = array(
        'field_course_application_period',
        'field_course_date',
      );
      $entity_type = $context['entity_type'];
      $bundle = $context['entity']->type;
      // Doesn't really matter what language to use since content is custom.
      $langcode = LANGUAGE_NONE;
      foreach ($fields as $field_name) {
        $instance = field_info_instance($context['entity_type'], $field_name, $bundle);
        $field = field_info_field_by_id($instance['field_id']);
        $field_value = field_get_items('node', $entity, $field_name);
        if (!empty($field_value[0]['value'])) {
          $items = array(
            array(
              '#markup' => '<span class="date-continuous">' .
              t('Continuous from @date', array(
                '@date' => format_date($field_value[0]['value'], 'mal_short_course'),
              )) . '</span>',
            ),
          );
        }
        else {
          $items = array(
            array('#markup' => '<span class="date-continuous">' . t('Continuous') . '</span>'),
          );
        }
        $view_mode = $context['view_mode'];
        $display = field_get_display($instance, $view_mode, $entity);
        $info = array(
          '#theme' => 'field',
          '#weight' => $display['weight'],
          '#title' => $instance['label'],
          '#access' => field_access('view', $field, $entity_type, $entity),
          '#label_display' => $display['label'],
          '#view_mode' => $view_mode,
          '#language' => $langcode,
          '#field_name' => $field['field_name'],
          '#field_type' => $field['type'],
          '#field_translatable' => $field['translatable'],
          '#entity_type' => $entity_type,
          '#bundle' => $bundle,
          '#object' => $entity,
          '#items' => $items,
          '#formatter' => $display['type'],
        );
        $output[$field_name] = array_merge($info, $items);
      }
    }
  }
}

/**
 * Implements hook_entity_view_alter().
 */
function mal_user_courses_entity_view_alter(&$build, $type) {
  $field_name = 'field_course_type_education';
  if ($type == 'node' &&
    !empty($build['#node']->type) && $build['#node']->type == 'course_packages' &&
    empty($build[$field_name])) {
    $build[$field_name] = array(
      '#type' => 'markup',
      '#markup' => '<div class="type-education"><div class="field-value">' . t('Gymnasial vuxenutbildning') . '</div></div>',
      '#weight' => -10,
    );

    if (!empty($build['field_course_searchable_type'])) {
      $build['field_course_searchable_type']['#weight'] = -15;
    }

    if (!empty($build['#groups']['group_first_group'])) {
      $build['#groups']['group_first_group']->children[] = $field_name;
      $build['#group_children'][$field_name] = 'group_first_group';
    }
  }
}
